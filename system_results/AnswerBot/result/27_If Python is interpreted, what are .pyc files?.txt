i've been given to understand that python is an interpreted language...
"if you're interested in cpython specifically: it compiles the source files into a python-specific lower-level form (known as "bytecode"), does so automatically when needed (when there is no bytecode file corresponding to a source file, or the bytecode file is older than the source or compiled by a different python version), usually saves the bytecode files to disk (to avoid recompiling them in the future).
"so, in this sense (what do typical implementations do), python is an "interpreted language" if and only if c# and java are: all of them have a typical implementation strategy of producing bytecode first, then executing it via a vm/interpreter.
"tldr; it's a converted code form the source code, which the python vm interprets for execution.
"similarly, python is "a language" in the sense of defining a class of language implementations which must all be similar in some fundamental respects (syntax, most semantics except those parts of those where they're explicitly allowed to differ) but are fully allowed to differ in just about every "implementation" detail -- including how they deal with the source files they're given, whether they compile the sources to some lower level forms (and, if so, which form -- and whether they save such compiled forms, to disk or elsewhere), how they execute said forms, and so forth.