"Most likely calling l.size() has loaded the size of your list into your cpu cache and calling l.isEmpty() is a lot faster as a result.
"A primitive linked list (one that doesn't store the size separately) for example could answer isEmpty() much faster than a size() call.
".size() has to look at the entire list, while .isEmpty() can stop at the first one.
"You can't test the speed of calling l.size() and l.isEmpty() at the same time, since they both query the same value.
For other implementations of List — for example, a naïve linked list* — counting the size might take a very long time, while you only actually care whether it is greater than zero.
