query,ss
Differences between HashMap and Hashtable?,"['there are several differences between hashmap and hashtable in java:', 'hashmap, hashtable in case of hash collisions they store the map entries in linked lists. from java8 for hashmap if hash bucket grows beyond a certain threshold, that bucket will switch from linked list of entries to a balanced tree. which improve worst-case performance from o(n) to o(log n). while converting the list to binary tree, hashcode is used as a branching variable. if there are two different hashcodes in the same bucket, one is considered bigger and goes to the right of the tree and other one to the left. but when both the hashcodes are equal, hashmap assumes that the keys are comparable, and compares the key to determine the direction so that some order can be maintained. it is a good practice to make the keys of hashmap comparable. on adding entries if bucket size reaches treeify_threshold = 8 convert linked list of entries to a balanced tree, on removing entries less than treeify_threshold and at most untreeify_threshold = 6 will reconvert balanced tree to linked list of entries. java 8 src, stackpost', 'keep in mind that hashtable was legacy class before java collections framework (jcf) was introduced and was later retrofitted to implement the map interface. so was vector and stack.', 'third difference on hashtable vs hashmap is that hashtable is obsolete class and you should be using concurrenthashmap in place of hashtable in java.', ""hashmap and hashtable have significant algorithmic differences as well. no one has mentioned this before so that's why i am bringing it up. hashmap will construct a hash table with power of two size, increase it dynamically such that you have at most about eight elements (collisions) in any bucket and will stir the elements very well for general element types. however, the hashtable implementation provides better and finer control over the hashing if you know what you are doing, namely you can fix the table size using e.g. the closest prime number to your values domain size and this will result in better performance than hashmap i.e. less collisions for some cases."", 'hashtable is synchronized, whereas hashmap is not. this makes hashmap better for non-threaded applications, as unsynchronized objects typically perform better than synchronized ones.', ""one of hashmap's subclasses is linkedhashmap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the hashmap for a linkedhashmap. this wouldn't be as easy if you were using hashtable."", 'hashtable is similar to the hashmap and has a similar interface. it is recommended that you use hashmap, unless you require support for legacy applications or you need synchronisation, as the hashtables methods are synchronised. so in your case as you are not multi-threading, hashmaps are your best bet.', 'in summary there are significant differences between hashtable and hashmap in java e.g. thread-safety and speed and based upon that only use hashtable if you absolutely need thread-safety, if you are running java 5 consider using concurrenthashmap in java.', ""hashtable is considered legacy code. there's nothing about hashtable that can't be done using hashmap or derivations of hashmap, so for new code, i don't see any justification for going back to hashtable.""]"
