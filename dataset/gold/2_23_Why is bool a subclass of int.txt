To avoid unnecessarily breaking non-ideal but working code, the new bool type needed to work just like 0 and 1.
No one would recommend using a boolean result in a numeric context, nor would most people recommend testing equality to determine truth value, no one wanted to find out the hard way just how much existing code is that way.
When the bool type was added, it was made a subclass of ints to simplify the use of existing code in new Pythons.
Basically True is equal to the integer 1 and False is equal to the integer 0.
The main takeaway is that equal objects with the same hash cannot be contained in the same set, and in Python 3.x, 1 and True, and 0 and False, will always have the same hash, and will always be equal.
